// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Struct.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Enum.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Struct_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Struct_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Struct_2eproto;
namespace Protocol {
class ActorInfo;
struct ActorInfoDefaultTypeInternal;
extern ActorInfoDefaultTypeInternal _ActorInfo_default_instance_;
class BuffData;
struct BuffDataDefaultTypeInternal;
extern BuffDataDefaultTypeInternal _BuffData_default_instance_;
class ObjectInfo;
struct ObjectInfoDefaultTypeInternal;
extern ObjectInfoDefaultTypeInternal _ObjectInfo_default_instance_;
class PlayerStat;
struct PlayerStatDefaultTypeInternal;
extern PlayerStatDefaultTypeInternal _PlayerStat_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::ActorInfo* Arena::CreateMaybeMessage<::Protocol::ActorInfo>(Arena*);
template<> ::Protocol::BuffData* Arena::CreateMaybeMessage<::Protocol::BuffData>(Arena*);
template<> ::Protocol::ObjectInfo* Arena::CreateMaybeMessage<::Protocol::ObjectInfo>(Arena*);
template<> ::Protocol::PlayerStat* Arena::CreateMaybeMessage<::Protocol::PlayerStat>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class BuffData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.BuffData) */ {
 public:
  inline BuffData() : BuffData(nullptr) {}
  ~BuffData() override;
  explicit PROTOBUF_CONSTEXPR BuffData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BuffData(const BuffData& from);
  BuffData(BuffData&& from) noexcept
    : BuffData() {
    *this = ::std::move(from);
  }

  inline BuffData& operator=(const BuffData& from) {
    CopyFrom(from);
    return *this;
  }
  inline BuffData& operator=(BuffData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BuffData& default_instance() {
    return *internal_default_instance();
  }
  static inline const BuffData* internal_default_instance() {
    return reinterpret_cast<const BuffData*>(
               &_BuffData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BuffData& a, BuffData& b) {
    a.Swap(&b);
  }
  inline void Swap(BuffData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BuffData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BuffData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BuffData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BuffData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BuffData& from) {
    BuffData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BuffData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.BuffData";
  }
  protected:
  explicit BuffData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVictimsFieldNumber = 3,
    kBuffIdFieldNumber = 1,
    kRemainTimeFieldNumber = 2,
  };
  // repeated uint64 victims = 3;
  int victims_size() const;
  private:
  int _internal_victims_size() const;
  public:
  void clear_victims();
  private:
  uint64_t _internal_victims(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_victims() const;
  void _internal_add_victims(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_victims();
  public:
  uint64_t victims(int index) const;
  void set_victims(int index, uint64_t value);
  void add_victims(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      victims() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_victims();

  // uint64 buffId = 1;
  void clear_buffid();
  uint64_t buffid() const;
  void set_buffid(uint64_t value);
  private:
  uint64_t _internal_buffid() const;
  void _internal_set_buffid(uint64_t value);
  public:

  // float remainTime = 2;
  void clear_remaintime();
  float remaintime() const;
  void set_remaintime(float value);
  private:
  float _internal_remaintime() const;
  void _internal_set_remaintime(float value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.BuffData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > victims_;
    mutable std::atomic<int> _victims_cached_byte_size_;
    uint64_t buffid_;
    float remaintime_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class ActorInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.ActorInfo) */ {
 public:
  inline ActorInfo() : ActorInfo(nullptr) {}
  ~ActorInfo() override;
  explicit PROTOBUF_CONSTEXPR ActorInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ActorInfo(const ActorInfo& from);
  ActorInfo(ActorInfo&& from) noexcept
    : ActorInfo() {
    *this = ::std::move(from);
  }

  inline ActorInfo& operator=(const ActorInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActorInfo& operator=(ActorInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ActorInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ActorInfo* internal_default_instance() {
    return reinterpret_cast<const ActorInfo*>(
               &_ActorInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ActorInfo& a, ActorInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ActorInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActorInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ActorInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ActorInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ActorInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ActorInfo& from) {
    ActorInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActorInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.ActorInfo";
  }
  protected:
  explicit ActorInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kPosXFieldNumber = 2,
    kPosYFieldNumber = 3,
  };
  // int64 id = 1;
  void clear_id();
  int64_t id() const;
  void set_id(int64_t value);
  private:
  int64_t _internal_id() const;
  void _internal_set_id(int64_t value);
  public:

  // float posX = 2;
  void clear_posx();
  float posx() const;
  void set_posx(float value);
  private:
  float _internal_posx() const;
  void _internal_set_posx(float value);
  public:

  // float posY = 3;
  void clear_posy();
  float posy() const;
  void set_posy(float value);
  private:
  float _internal_posy() const;
  void _internal_set_posy(float value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.ActorInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t id_;
    float posx_;
    float posy_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class ObjectInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.ObjectInfo) */ {
 public:
  inline ObjectInfo() : ObjectInfo(nullptr) {}
  ~ObjectInfo() override;
  explicit PROTOBUF_CONSTEXPR ObjectInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectInfo(const ObjectInfo& from);
  ObjectInfo(ObjectInfo&& from) noexcept
    : ObjectInfo() {
    *this = ::std::move(from);
  }

  inline ObjectInfo& operator=(const ObjectInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectInfo& operator=(ObjectInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectInfo* internal_default_instance() {
    return reinterpret_cast<const ObjectInfo*>(
               &_ObjectInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ObjectInfo& a, ObjectInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObjectInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObjectInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ObjectInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ObjectInfo& from) {
    ObjectInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.ObjectInfo";
  }
  protected:
  explicit ObjectInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
    kDirFieldNumber = 2,
  };
  // .Protocol.OBJECT_STATE_TYPE state = 1;
  void clear_state();
  ::Protocol::OBJECT_STATE_TYPE state() const;
  void set_state(::Protocol::OBJECT_STATE_TYPE value);
  private:
  ::Protocol::OBJECT_STATE_TYPE _internal_state() const;
  void _internal_set_state(::Protocol::OBJECT_STATE_TYPE value);
  public:

  // .Protocol.DIR_TYPE dir = 2;
  void clear_dir();
  ::Protocol::DIR_TYPE dir() const;
  void set_dir(::Protocol::DIR_TYPE value);
  private:
  ::Protocol::DIR_TYPE _internal_dir() const;
  void _internal_set_dir(::Protocol::DIR_TYPE value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.ObjectInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int state_;
    int dir_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class PlayerStat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.PlayerStat) */ {
 public:
  inline PlayerStat() : PlayerStat(nullptr) {}
  ~PlayerStat() override;
  explicit PROTOBUF_CONSTEXPR PlayerStat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerStat(const PlayerStat& from);
  PlayerStat(PlayerStat&& from) noexcept
    : PlayerStat() {
    *this = ::std::move(from);
  }

  inline PlayerStat& operator=(const PlayerStat& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerStat& operator=(PlayerStat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerStat& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerStat* internal_default_instance() {
    return reinterpret_cast<const PlayerStat*>(
               &_PlayerStat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PlayerStat& a, PlayerStat& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerStat* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerStat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerStat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerStat>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerStat& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerStat& from) {
    PlayerStat::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerStat* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.PlayerStat";
  }
  protected:
  explicit PlayerStat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHpFieldNumber = 1,
    kRunSpeedFieldNumber = 2,
    kCrouchSpeedFieldNumber = 3,
    kJumpSpeedFieldNumber = 4,
    kSkillPointFieldNumber = 5,
    kNAtkRangeFieldNumber = 6,
    kNLongAtkDistanceFieldNumber = 7,
    kKnockBackDistanceFieldNumber = 8,
    kStrongAtkMultiplierFieldNumber = 9,
    kNAtkDamageFieldNumber = 10,
    kSkillDamageFieldNumber = 11,
    kSkillRangeFieldNumber = 12,
    kSkillDurationFieldNumber = 13,
    kSkillStepDistanceFieldNumber = 14,
  };
  // int32 hp = 1;
  void clear_hp();
  int32_t hp() const;
  void set_hp(int32_t value);
  private:
  int32_t _internal_hp() const;
  void _internal_set_hp(int32_t value);
  public:

  // float runSpeed = 2;
  void clear_runspeed();
  float runspeed() const;
  void set_runspeed(float value);
  private:
  float _internal_runspeed() const;
  void _internal_set_runspeed(float value);
  public:

  // float crouchSpeed = 3;
  void clear_crouchspeed();
  float crouchspeed() const;
  void set_crouchspeed(float value);
  private:
  float _internal_crouchspeed() const;
  void _internal_set_crouchspeed(float value);
  public:

  // float jumpSpeed = 4;
  void clear_jumpspeed();
  float jumpspeed() const;
  void set_jumpspeed(float value);
  private:
  float _internal_jumpspeed() const;
  void _internal_set_jumpspeed(float value);
  public:

  // int32 skillPoint = 5;
  void clear_skillpoint();
  int32_t skillpoint() const;
  void set_skillpoint(int32_t value);
  private:
  int32_t _internal_skillpoint() const;
  void _internal_set_skillpoint(int32_t value);
  public:

  // int32 nAtkRange = 6;
  void clear_natkrange();
  int32_t natkrange() const;
  void set_natkrange(int32_t value);
  private:
  int32_t _internal_natkrange() const;
  void _internal_set_natkrange(int32_t value);
  public:

  // int32 nLongAtkDistance = 7;
  void clear_nlongatkdistance();
  int32_t nlongatkdistance() const;
  void set_nlongatkdistance(int32_t value);
  private:
  int32_t _internal_nlongatkdistance() const;
  void _internal_set_nlongatkdistance(int32_t value);
  public:

  // int32 knockBackDistance = 8;
  void clear_knockbackdistance();
  int32_t knockbackdistance() const;
  void set_knockbackdistance(int32_t value);
  private:
  int32_t _internal_knockbackdistance() const;
  void _internal_set_knockbackdistance(int32_t value);
  public:

  // float strongAtkMultiplier = 9;
  void clear_strongatkmultiplier();
  float strongatkmultiplier() const;
  void set_strongatkmultiplier(float value);
  private:
  float _internal_strongatkmultiplier() const;
  void _internal_set_strongatkmultiplier(float value);
  public:

  // int32 nAtkDamage = 10;
  void clear_natkdamage();
  int32_t natkdamage() const;
  void set_natkdamage(int32_t value);
  private:
  int32_t _internal_natkdamage() const;
  void _internal_set_natkdamage(int32_t value);
  public:

  // int32 skillDamage = 11;
  void clear_skilldamage();
  int32_t skilldamage() const;
  void set_skilldamage(int32_t value);
  private:
  int32_t _internal_skilldamage() const;
  void _internal_set_skilldamage(int32_t value);
  public:

  // int32 skillRange = 12;
  void clear_skillrange();
  int32_t skillrange() const;
  void set_skillrange(int32_t value);
  private:
  int32_t _internal_skillrange() const;
  void _internal_set_skillrange(int32_t value);
  public:

  // float skillDuration = 13;
  void clear_skillduration();
  float skillduration() const;
  void set_skillduration(float value);
  private:
  float _internal_skillduration() const;
  void _internal_set_skillduration(float value);
  public:

  // int32 skillStepDistance = 14;
  void clear_skillstepdistance();
  int32_t skillstepdistance() const;
  void set_skillstepdistance(int32_t value);
  private:
  int32_t _internal_skillstepdistance() const;
  void _internal_set_skillstepdistance(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.PlayerStat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t hp_;
    float runspeed_;
    float crouchspeed_;
    float jumpspeed_;
    int32_t skillpoint_;
    int32_t natkrange_;
    int32_t nlongatkdistance_;
    int32_t knockbackdistance_;
    float strongatkmultiplier_;
    int32_t natkdamage_;
    int32_t skilldamage_;
    int32_t skillrange_;
    float skillduration_;
    int32_t skillstepdistance_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BuffData

// uint64 buffId = 1;
inline void BuffData::clear_buffid() {
  _impl_.buffid_ = uint64_t{0u};
}
inline uint64_t BuffData::_internal_buffid() const {
  return _impl_.buffid_;
}
inline uint64_t BuffData::buffid() const {
  // @@protoc_insertion_point(field_get:Protocol.BuffData.buffId)
  return _internal_buffid();
}
inline void BuffData::_internal_set_buffid(uint64_t value) {
  
  _impl_.buffid_ = value;
}
inline void BuffData::set_buffid(uint64_t value) {
  _internal_set_buffid(value);
  // @@protoc_insertion_point(field_set:Protocol.BuffData.buffId)
}

// float remainTime = 2;
inline void BuffData::clear_remaintime() {
  _impl_.remaintime_ = 0;
}
inline float BuffData::_internal_remaintime() const {
  return _impl_.remaintime_;
}
inline float BuffData::remaintime() const {
  // @@protoc_insertion_point(field_get:Protocol.BuffData.remainTime)
  return _internal_remaintime();
}
inline void BuffData::_internal_set_remaintime(float value) {
  
  _impl_.remaintime_ = value;
}
inline void BuffData::set_remaintime(float value) {
  _internal_set_remaintime(value);
  // @@protoc_insertion_point(field_set:Protocol.BuffData.remainTime)
}

// repeated uint64 victims = 3;
inline int BuffData::_internal_victims_size() const {
  return _impl_.victims_.size();
}
inline int BuffData::victims_size() const {
  return _internal_victims_size();
}
inline void BuffData::clear_victims() {
  _impl_.victims_.Clear();
}
inline uint64_t BuffData::_internal_victims(int index) const {
  return _impl_.victims_.Get(index);
}
inline uint64_t BuffData::victims(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.BuffData.victims)
  return _internal_victims(index);
}
inline void BuffData::set_victims(int index, uint64_t value) {
  _impl_.victims_.Set(index, value);
  // @@protoc_insertion_point(field_set:Protocol.BuffData.victims)
}
inline void BuffData::_internal_add_victims(uint64_t value) {
  _impl_.victims_.Add(value);
}
inline void BuffData::add_victims(uint64_t value) {
  _internal_add_victims(value);
  // @@protoc_insertion_point(field_add:Protocol.BuffData.victims)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
BuffData::_internal_victims() const {
  return _impl_.victims_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
BuffData::victims() const {
  // @@protoc_insertion_point(field_list:Protocol.BuffData.victims)
  return _internal_victims();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
BuffData::_internal_mutable_victims() {
  return &_impl_.victims_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
BuffData::mutable_victims() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.BuffData.victims)
  return _internal_mutable_victims();
}

// -------------------------------------------------------------------

// ActorInfo

// int64 id = 1;
inline void ActorInfo::clear_id() {
  _impl_.id_ = int64_t{0};
}
inline int64_t ActorInfo::_internal_id() const {
  return _impl_.id_;
}
inline int64_t ActorInfo::id() const {
  // @@protoc_insertion_point(field_get:Protocol.ActorInfo.id)
  return _internal_id();
}
inline void ActorInfo::_internal_set_id(int64_t value) {
  
  _impl_.id_ = value;
}
inline void ActorInfo::set_id(int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Protocol.ActorInfo.id)
}

// float posX = 2;
inline void ActorInfo::clear_posx() {
  _impl_.posx_ = 0;
}
inline float ActorInfo::_internal_posx() const {
  return _impl_.posx_;
}
inline float ActorInfo::posx() const {
  // @@protoc_insertion_point(field_get:Protocol.ActorInfo.posX)
  return _internal_posx();
}
inline void ActorInfo::_internal_set_posx(float value) {
  
  _impl_.posx_ = value;
}
inline void ActorInfo::set_posx(float value) {
  _internal_set_posx(value);
  // @@protoc_insertion_point(field_set:Protocol.ActorInfo.posX)
}

// float posY = 3;
inline void ActorInfo::clear_posy() {
  _impl_.posy_ = 0;
}
inline float ActorInfo::_internal_posy() const {
  return _impl_.posy_;
}
inline float ActorInfo::posy() const {
  // @@protoc_insertion_point(field_get:Protocol.ActorInfo.posY)
  return _internal_posy();
}
inline void ActorInfo::_internal_set_posy(float value) {
  
  _impl_.posy_ = value;
}
inline void ActorInfo::set_posy(float value) {
  _internal_set_posy(value);
  // @@protoc_insertion_point(field_set:Protocol.ActorInfo.posY)
}

// -------------------------------------------------------------------

// ObjectInfo

// .Protocol.OBJECT_STATE_TYPE state = 1;
inline void ObjectInfo::clear_state() {
  _impl_.state_ = 0;
}
inline ::Protocol::OBJECT_STATE_TYPE ObjectInfo::_internal_state() const {
  return static_cast< ::Protocol::OBJECT_STATE_TYPE >(_impl_.state_);
}
inline ::Protocol::OBJECT_STATE_TYPE ObjectInfo::state() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.state)
  return _internal_state();
}
inline void ObjectInfo::_internal_set_state(::Protocol::OBJECT_STATE_TYPE value) {
  
  _impl_.state_ = value;
}
inline void ObjectInfo::set_state(::Protocol::OBJECT_STATE_TYPE value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.state)
}

// .Protocol.DIR_TYPE dir = 2;
inline void ObjectInfo::clear_dir() {
  _impl_.dir_ = 0;
}
inline ::Protocol::DIR_TYPE ObjectInfo::_internal_dir() const {
  return static_cast< ::Protocol::DIR_TYPE >(_impl_.dir_);
}
inline ::Protocol::DIR_TYPE ObjectInfo::dir() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.dir)
  return _internal_dir();
}
inline void ObjectInfo::_internal_set_dir(::Protocol::DIR_TYPE value) {
  
  _impl_.dir_ = value;
}
inline void ObjectInfo::set_dir(::Protocol::DIR_TYPE value) {
  _internal_set_dir(value);
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.dir)
}

// -------------------------------------------------------------------

// PlayerStat

// int32 hp = 1;
inline void PlayerStat::clear_hp() {
  _impl_.hp_ = 0;
}
inline int32_t PlayerStat::_internal_hp() const {
  return _impl_.hp_;
}
inline int32_t PlayerStat::hp() const {
  // @@protoc_insertion_point(field_get:Protocol.PlayerStat.hp)
  return _internal_hp();
}
inline void PlayerStat::_internal_set_hp(int32_t value) {
  
  _impl_.hp_ = value;
}
inline void PlayerStat::set_hp(int32_t value) {
  _internal_set_hp(value);
  // @@protoc_insertion_point(field_set:Protocol.PlayerStat.hp)
}

// float runSpeed = 2;
inline void PlayerStat::clear_runspeed() {
  _impl_.runspeed_ = 0;
}
inline float PlayerStat::_internal_runspeed() const {
  return _impl_.runspeed_;
}
inline float PlayerStat::runspeed() const {
  // @@protoc_insertion_point(field_get:Protocol.PlayerStat.runSpeed)
  return _internal_runspeed();
}
inline void PlayerStat::_internal_set_runspeed(float value) {
  
  _impl_.runspeed_ = value;
}
inline void PlayerStat::set_runspeed(float value) {
  _internal_set_runspeed(value);
  // @@protoc_insertion_point(field_set:Protocol.PlayerStat.runSpeed)
}

// float crouchSpeed = 3;
inline void PlayerStat::clear_crouchspeed() {
  _impl_.crouchspeed_ = 0;
}
inline float PlayerStat::_internal_crouchspeed() const {
  return _impl_.crouchspeed_;
}
inline float PlayerStat::crouchspeed() const {
  // @@protoc_insertion_point(field_get:Protocol.PlayerStat.crouchSpeed)
  return _internal_crouchspeed();
}
inline void PlayerStat::_internal_set_crouchspeed(float value) {
  
  _impl_.crouchspeed_ = value;
}
inline void PlayerStat::set_crouchspeed(float value) {
  _internal_set_crouchspeed(value);
  // @@protoc_insertion_point(field_set:Protocol.PlayerStat.crouchSpeed)
}

// float jumpSpeed = 4;
inline void PlayerStat::clear_jumpspeed() {
  _impl_.jumpspeed_ = 0;
}
inline float PlayerStat::_internal_jumpspeed() const {
  return _impl_.jumpspeed_;
}
inline float PlayerStat::jumpspeed() const {
  // @@protoc_insertion_point(field_get:Protocol.PlayerStat.jumpSpeed)
  return _internal_jumpspeed();
}
inline void PlayerStat::_internal_set_jumpspeed(float value) {
  
  _impl_.jumpspeed_ = value;
}
inline void PlayerStat::set_jumpspeed(float value) {
  _internal_set_jumpspeed(value);
  // @@protoc_insertion_point(field_set:Protocol.PlayerStat.jumpSpeed)
}

// int32 skillPoint = 5;
inline void PlayerStat::clear_skillpoint() {
  _impl_.skillpoint_ = 0;
}
inline int32_t PlayerStat::_internal_skillpoint() const {
  return _impl_.skillpoint_;
}
inline int32_t PlayerStat::skillpoint() const {
  // @@protoc_insertion_point(field_get:Protocol.PlayerStat.skillPoint)
  return _internal_skillpoint();
}
inline void PlayerStat::_internal_set_skillpoint(int32_t value) {
  
  _impl_.skillpoint_ = value;
}
inline void PlayerStat::set_skillpoint(int32_t value) {
  _internal_set_skillpoint(value);
  // @@protoc_insertion_point(field_set:Protocol.PlayerStat.skillPoint)
}

// int32 nAtkRange = 6;
inline void PlayerStat::clear_natkrange() {
  _impl_.natkrange_ = 0;
}
inline int32_t PlayerStat::_internal_natkrange() const {
  return _impl_.natkrange_;
}
inline int32_t PlayerStat::natkrange() const {
  // @@protoc_insertion_point(field_get:Protocol.PlayerStat.nAtkRange)
  return _internal_natkrange();
}
inline void PlayerStat::_internal_set_natkrange(int32_t value) {
  
  _impl_.natkrange_ = value;
}
inline void PlayerStat::set_natkrange(int32_t value) {
  _internal_set_natkrange(value);
  // @@protoc_insertion_point(field_set:Protocol.PlayerStat.nAtkRange)
}

// int32 nLongAtkDistance = 7;
inline void PlayerStat::clear_nlongatkdistance() {
  _impl_.nlongatkdistance_ = 0;
}
inline int32_t PlayerStat::_internal_nlongatkdistance() const {
  return _impl_.nlongatkdistance_;
}
inline int32_t PlayerStat::nlongatkdistance() const {
  // @@protoc_insertion_point(field_get:Protocol.PlayerStat.nLongAtkDistance)
  return _internal_nlongatkdistance();
}
inline void PlayerStat::_internal_set_nlongatkdistance(int32_t value) {
  
  _impl_.nlongatkdistance_ = value;
}
inline void PlayerStat::set_nlongatkdistance(int32_t value) {
  _internal_set_nlongatkdistance(value);
  // @@protoc_insertion_point(field_set:Protocol.PlayerStat.nLongAtkDistance)
}

// int32 knockBackDistance = 8;
inline void PlayerStat::clear_knockbackdistance() {
  _impl_.knockbackdistance_ = 0;
}
inline int32_t PlayerStat::_internal_knockbackdistance() const {
  return _impl_.knockbackdistance_;
}
inline int32_t PlayerStat::knockbackdistance() const {
  // @@protoc_insertion_point(field_get:Protocol.PlayerStat.knockBackDistance)
  return _internal_knockbackdistance();
}
inline void PlayerStat::_internal_set_knockbackdistance(int32_t value) {
  
  _impl_.knockbackdistance_ = value;
}
inline void PlayerStat::set_knockbackdistance(int32_t value) {
  _internal_set_knockbackdistance(value);
  // @@protoc_insertion_point(field_set:Protocol.PlayerStat.knockBackDistance)
}

// float strongAtkMultiplier = 9;
inline void PlayerStat::clear_strongatkmultiplier() {
  _impl_.strongatkmultiplier_ = 0;
}
inline float PlayerStat::_internal_strongatkmultiplier() const {
  return _impl_.strongatkmultiplier_;
}
inline float PlayerStat::strongatkmultiplier() const {
  // @@protoc_insertion_point(field_get:Protocol.PlayerStat.strongAtkMultiplier)
  return _internal_strongatkmultiplier();
}
inline void PlayerStat::_internal_set_strongatkmultiplier(float value) {
  
  _impl_.strongatkmultiplier_ = value;
}
inline void PlayerStat::set_strongatkmultiplier(float value) {
  _internal_set_strongatkmultiplier(value);
  // @@protoc_insertion_point(field_set:Protocol.PlayerStat.strongAtkMultiplier)
}

// int32 nAtkDamage = 10;
inline void PlayerStat::clear_natkdamage() {
  _impl_.natkdamage_ = 0;
}
inline int32_t PlayerStat::_internal_natkdamage() const {
  return _impl_.natkdamage_;
}
inline int32_t PlayerStat::natkdamage() const {
  // @@protoc_insertion_point(field_get:Protocol.PlayerStat.nAtkDamage)
  return _internal_natkdamage();
}
inline void PlayerStat::_internal_set_natkdamage(int32_t value) {
  
  _impl_.natkdamage_ = value;
}
inline void PlayerStat::set_natkdamage(int32_t value) {
  _internal_set_natkdamage(value);
  // @@protoc_insertion_point(field_set:Protocol.PlayerStat.nAtkDamage)
}

// int32 skillDamage = 11;
inline void PlayerStat::clear_skilldamage() {
  _impl_.skilldamage_ = 0;
}
inline int32_t PlayerStat::_internal_skilldamage() const {
  return _impl_.skilldamage_;
}
inline int32_t PlayerStat::skilldamage() const {
  // @@protoc_insertion_point(field_get:Protocol.PlayerStat.skillDamage)
  return _internal_skilldamage();
}
inline void PlayerStat::_internal_set_skilldamage(int32_t value) {
  
  _impl_.skilldamage_ = value;
}
inline void PlayerStat::set_skilldamage(int32_t value) {
  _internal_set_skilldamage(value);
  // @@protoc_insertion_point(field_set:Protocol.PlayerStat.skillDamage)
}

// int32 skillRange = 12;
inline void PlayerStat::clear_skillrange() {
  _impl_.skillrange_ = 0;
}
inline int32_t PlayerStat::_internal_skillrange() const {
  return _impl_.skillrange_;
}
inline int32_t PlayerStat::skillrange() const {
  // @@protoc_insertion_point(field_get:Protocol.PlayerStat.skillRange)
  return _internal_skillrange();
}
inline void PlayerStat::_internal_set_skillrange(int32_t value) {
  
  _impl_.skillrange_ = value;
}
inline void PlayerStat::set_skillrange(int32_t value) {
  _internal_set_skillrange(value);
  // @@protoc_insertion_point(field_set:Protocol.PlayerStat.skillRange)
}

// float skillDuration = 13;
inline void PlayerStat::clear_skillduration() {
  _impl_.skillduration_ = 0;
}
inline float PlayerStat::_internal_skillduration() const {
  return _impl_.skillduration_;
}
inline float PlayerStat::skillduration() const {
  // @@protoc_insertion_point(field_get:Protocol.PlayerStat.skillDuration)
  return _internal_skillduration();
}
inline void PlayerStat::_internal_set_skillduration(float value) {
  
  _impl_.skillduration_ = value;
}
inline void PlayerStat::set_skillduration(float value) {
  _internal_set_skillduration(value);
  // @@protoc_insertion_point(field_set:Protocol.PlayerStat.skillDuration)
}

// int32 skillStepDistance = 14;
inline void PlayerStat::clear_skillstepdistance() {
  _impl_.skillstepdistance_ = 0;
}
inline int32_t PlayerStat::_internal_skillstepdistance() const {
  return _impl_.skillstepdistance_;
}
inline int32_t PlayerStat::skillstepdistance() const {
  // @@protoc_insertion_point(field_get:Protocol.PlayerStat.skillStepDistance)
  return _internal_skillstepdistance();
}
inline void PlayerStat::_internal_set_skillstepdistance(int32_t value) {
  
  _impl_.skillstepdistance_ = value;
}
inline void PlayerStat::set_skillstepdistance(int32_t value) {
  _internal_set_skillstepdistance(value);
  // @@protoc_insertion_point(field_set:Protocol.PlayerStat.skillStepDistance)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto
