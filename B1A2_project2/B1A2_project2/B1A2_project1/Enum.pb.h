// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Enum.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Enum_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Enum_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Enum_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Enum_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Enum_2eproto;
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

enum DIR_TYPE : int {
  DIR_TYPE_LEFT = 0,
  DIR_TYPE_RIGHT = 1,
  DIR_TYPE_UP = 2,
  DIR_TYPE_DOWN = 3,
  DIR_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  DIR_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool DIR_TYPE_IsValid(int value);
constexpr DIR_TYPE DIR_TYPE_MIN = DIR_TYPE_LEFT;
constexpr DIR_TYPE DIR_TYPE_MAX = DIR_TYPE_DOWN;
constexpr int DIR_TYPE_ARRAYSIZE = DIR_TYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DIR_TYPE_descriptor();
template<typename T>
inline const std::string& DIR_TYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DIR_TYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DIR_TYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DIR_TYPE_descriptor(), enum_t_value);
}
inline bool DIR_TYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DIR_TYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DIR_TYPE>(
    DIR_TYPE_descriptor(), name, value);
}
enum OBJECT_STATE_TYPE : int {
  OBJECT_STATE_TYPE_IDLE = 0,
  OBJECT_STATE_TYPE_MOVE = 1,
  OBJECT_STATE_TYPE_DUCK_DOWN = 2,
  OBJECT_STATE_TYPE_DUCK_DOWN_MOVE = 3,
  OBJECT_STATE_TYPE_JUMP = 4,
  OBJECT_STATE_TYPE_CLOSE_ATTACK = 5,
  OBJECT_STATE_TYPE_LONG_ATTACK = 6,
  OBJECT_STATE_TYPE_LONG_ATTACK_LENGTH = 7,
  OBJECT_STATE_TYPE_LONG_ATTACK_WIDTH = 8,
  OBJECT_STATE_TYPE_THRUST = 9,
  OBJECT_STATE_TYPE_BACK_STEP = 10,
  OBJECT_STATE_TYPE_SLASH_WAVE = 11,
  OBJECT_STATE_TYPE_SKILL_READY = 12,
  OBJECT_STATE_TYPE_SKILL_WAITING = 13,
  OBJECT_STATE_TYPE_SKILL_END = 14,
  OBJECT_STATE_TYPE_HANG = 15,
  OBJECT_STATE_TYPE_RELEASE = 16,
  OBJECT_STATE_TYPE_HIT = 17,
  OBJECT_STATE_TYPE_DEAD = 18,
  OBJECT_STATE_TYPE_CHASE = 19,
  OBJECT_STATE_TYPE_ROAMING = 20,
  OBJECT_STATE_TYPE_DASH = 21,
  OBJECT_STATE_TYPE_RETURN = 22,
  OBJECT_STATE_TYPE_RETURN_IDLE = 23,
  OBJECT_STATE_TYPE_PROJECTILE_FALL = 24,
  OBJECT_STATE_TYPE_CRYSTAL_CREATION = 25,
  OBJECT_STATE_TYPE_MONSTER_CREATION = 26,
  OBJECT_STATE_TYPE_TELEPORT = 27,
  OBJECT_STATE_TYPE_CUT_SEVERELY = 28,
  OBJECT_STATE_TYPE_ON = 29,
  OBJECT_STATE_TYPE_ON2 = 30,
  OBJECT_STATE_TYPE_READY = 31,
  OBJECT_STATE_TYPE_OFF = 32,
  OBJECT_STATE_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  OBJECT_STATE_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool OBJECT_STATE_TYPE_IsValid(int value);
constexpr OBJECT_STATE_TYPE OBJECT_STATE_TYPE_MIN = OBJECT_STATE_TYPE_IDLE;
constexpr OBJECT_STATE_TYPE OBJECT_STATE_TYPE_MAX = OBJECT_STATE_TYPE_OFF;
constexpr int OBJECT_STATE_TYPE_ARRAYSIZE = OBJECT_STATE_TYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OBJECT_STATE_TYPE_descriptor();
template<typename T>
inline const std::string& OBJECT_STATE_TYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OBJECT_STATE_TYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OBJECT_STATE_TYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OBJECT_STATE_TYPE_descriptor(), enum_t_value);
}
inline bool OBJECT_STATE_TYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, OBJECT_STATE_TYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OBJECT_STATE_TYPE>(
    OBJECT_STATE_TYPE_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Protocol::DIR_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::DIR_TYPE>() {
  return ::Protocol::DIR_TYPE_descriptor();
}
template <> struct is_proto_enum< ::Protocol::OBJECT_STATE_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::OBJECT_STATE_TYPE>() {
  return ::Protocol::OBJECT_STATE_TYPE_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Enum_2eproto
